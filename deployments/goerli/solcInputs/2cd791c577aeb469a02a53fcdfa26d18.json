{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    uint256 public constant minimumUsd = 50 * 1e18;\n    //msg.value is in wei;\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    function fund() public payable {\n        require(\n            getConversionRate(msg.value, priceFeed) >= minimumUsd,\n            \"Didnt send enough\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function getPrice(AggregatorV3Interface priceFeed)\n        public\n        view\n        returns (uint256)\n    {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        //ETH in terms of USD\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) public view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n\n    address public immutable owner; //declared onc e\n\n    function withdraw() public onlyOwner {\n        //for loop\n        require(msg.sender == owner);\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        //reset array\n        funders = new address[](0); //0 means 0 element\n\n        //sender ether\n        //transfer\n        //send\n        //call\n        //payable(...)=payable address\n        payable(msg.sender).transfer(address(this).balance);\n        //fails -->throws error\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        require(sendSuccess, \"send failed\");\n        //fails -->returns bool\n\n        //this--->this contract\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender==owner,\"sender is not owner\");\n        if (msg.sender != owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n}\n//what if funded without running fund func\n\n//constant\n//immutable\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}